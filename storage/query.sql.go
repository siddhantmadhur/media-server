// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"
	"time"
)

const addContent = `-- name: AddContent :one
INSERT INTO content_library(created_at, file_path, media_library_id, extension, name)
VALUES ( ?, ?, ?, ? , ?)
RETURNING id, created_at, file_path, media_library_id, extension, name
`

type AddContentParams struct {
	CreatedAt      time.Time
	FilePath       string
	MediaLibraryID int64
	Extension      string
	Name           string
}

func (q *Queries) AddContent(ctx context.Context, arg AddContentParams) (ContentLibrary, error) {
	row := q.db.QueryRowContext(ctx, addContent,
		arg.CreatedAt,
		arg.FilePath,
		arg.MediaLibraryID,
		arg.Extension,
		arg.Name,
	)
	var i ContentLibrary
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.FilePath,
		&i.MediaLibraryID,
		&i.Extension,
		&i.Name,
	)
	return i, err
}

const createMediaLibrary = `-- name: CreateMediaLibrary :one
INSERT INTO media_library(created_at, name, description, device_path, media_type, owner_id) 
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, created_at, name, description, device_path, media_type, owner_id
`

type CreateMediaLibraryParams struct {
	CreatedAt   time.Time
	Name        string
	Description string
	DevicePath  string
	MediaType   string
	OwnerID     int64
}

func (q *Queries) CreateMediaLibrary(ctx context.Context, arg CreateMediaLibraryParams) (MediaLibrary, error) {
	row := q.db.QueryRowContext(ctx, createMediaLibrary,
		arg.CreatedAt,
		arg.Name,
		arg.Description,
		arg.DevicePath,
		arg.MediaType,
		arg.OwnerID,
	)
	var i MediaLibrary
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.DevicePath,
		&i.MediaType,
		&i.OwnerID,
	)
	return i, err
}

const createProfile = `-- name: CreateProfile :exec
INSERT INTO profiles (username, password, type) 
VALUES ( ?, ?, ? )
`

type CreateProfileParams struct {
	Username string
	Password []byte
	Type     int64
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) error {
	_, err := q.db.ExecContext(ctx, createProfile, arg.Username, arg.Password, arg.Type)
	return err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id, created_at, access_token, refresh_token, refresh_expires_at, access_expires_at, device, device_name, client_name, client_version)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, user_id, access_token, refresh_token, created_at, access_expires_at, refresh_expires_at, device, device_name, client_name, client_version
`

type CreateSessionParams struct {
	ID               string
	UserID           int64
	CreatedAt        time.Time
	AccessToken      string
	RefreshToken     string
	RefreshExpiresAt time.Time
	AccessExpiresAt  time.Time
	Device           string
	DeviceName       string
	ClientName       string
	ClientVersion    string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.AccessToken,
		arg.RefreshToken,
		arg.RefreshExpiresAt,
		arg.AccessExpiresAt,
		arg.Device,
		arg.DeviceName,
		arg.ClientName,
		arg.ClientVersion,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.AccessExpiresAt,
		&i.RefreshExpiresAt,
		&i.Device,
		&i.DeviceName,
		&i.ClientName,
		&i.ClientVersion,
	)
	return i, err
}

const getAdminUser = `-- name: GetAdminUser :one
SELECT id, username, password, type FROM profiles
WHERE type = 0
`

func (q *Queries) GetAdminUser(ctx context.Context) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getAdminUser)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Type,
	)
	return i, err
}

const getAllMediaLibraries = `-- name: GetAllMediaLibraries :many
SELECT id, created_at, name, description, device_path, media_type, owner_id FROM media_library
`

func (q *Queries) GetAllMediaLibraries(ctx context.Context) ([]MediaLibrary, error) {
	rows, err := q.db.QueryContext(ctx, getAllMediaLibraries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MediaLibrary
	for rows.Next() {
		var i MediaLibrary
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
			&i.DevicePath,
			&i.MediaType,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContentInfo = `-- name: GetContentInfo :one
select content_library.id, content_library.name, file_path, extension, device_path, media_type, content_metadata.id  from content_library
left  join media_library
on content_library.media_library_id = media_library.id
left join content_metadata
on content_metadata.content_id = content_library.id
where content_library.id = ?
`

type GetContentInfoRow struct {
	ID         int64
	Name       string
	FilePath   string
	Extension  string
	DevicePath sql.NullString
	MediaType  sql.NullString
	ID_2       sql.NullInt64
}

func (q *Queries) GetContentInfo(ctx context.Context, id int64) (GetContentInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getContentInfo, id)
	var i GetContentInfoRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FilePath,
		&i.Extension,
		&i.DevicePath,
		&i.MediaType,
		&i.ID_2,
	)
	return i, err
}

const getMediaLibrary = `-- name: GetMediaLibrary :one
SELECT id, created_at, name, description, device_path, media_type, owner_id FROM media_library
WHERE id = ?
`

func (q *Queries) GetMediaLibrary(ctx context.Context, id int64) (MediaLibrary, error) {
	row := q.db.QueryRowContext(ctx, getMediaLibrary, id)
	var i MediaLibrary
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.DevicePath,
		&i.MediaType,
		&i.OwnerID,
	)
	return i, err
}

const getProfiles = `-- name: GetProfiles :many
SELECT id, username FROM profiles
`

type GetProfilesRow struct {
	ID       int64
	Username string
}

func (q *Queries) GetProfiles(ctx context.Context) ([]GetProfilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProfilesRow
	for rows.Next() {
		var i GetProfilesRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFromUsername = `-- name: GetUserFromUsername :one
SELECT id, username, password, type FROM profiles 
WHERE username = ?
`

func (q *Queries) GetUserFromUsername(ctx context.Context, username string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getUserFromUsername, username)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Type,
	)
	return i, err
}

const isFinishedSetup = `-- name: IsFinishedSetup :one
SELECT count(*) FROM profiles
`

func (q *Queries) IsFinishedSetup(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, isFinishedSetup)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const linkContentMetadata = `-- name: LinkContentMetadata :one
INSERT INTO content_metadata(created_at, content_id, title, description, poster_url, release_date, type)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, created_at, content_id, title, description, poster_url, release_date, season_number, episode_number, type
`

type LinkContentMetadataParams struct {
	CreatedAt   time.Time
	ContentID   int64
	Title       string
	Description string
	PosterUrl   string
	ReleaseDate time.Time
	Type        string
}

func (q *Queries) LinkContentMetadata(ctx context.Context, arg LinkContentMetadataParams) (ContentMetadatum, error) {
	row := q.db.QueryRowContext(ctx, linkContentMetadata,
		arg.CreatedAt,
		arg.ContentID,
		arg.Title,
		arg.Description,
		arg.PosterUrl,
		arg.ReleaseDate,
		arg.Type,
	)
	var i ContentMetadatum
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ContentID,
		&i.Title,
		&i.Description,
		&i.PosterUrl,
		&i.ReleaseDate,
		&i.SeasonNumber,
		&i.EpisodeNumber,
		&i.Type,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE profiles 
SET username = ?, password = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Username string
	Password []byte
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Username, arg.Password, arg.ID)
	return err
}
